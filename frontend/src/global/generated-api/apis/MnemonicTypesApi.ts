/* tslint:disable */
/* eslint-disable */
/**
 * v2.0 Documentation
 * Swagger Specification
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MnemonicType,
    MnemonicTypeFromJSON,
    MnemonicTypeToJSON,
} from '../models';

export interface MnemonicTypesCreateRequest {
    data: MnemonicType;
}

export interface MnemonicTypesDeleteRequest {
    id: number;
}

export interface MnemonicTypesPartialUpdateRequest {
    id: number;
    data: MnemonicType;
}

export interface MnemonicTypesReadRequest {
    id: number;
}

export interface MnemonicTypesUpdateRequest {
    id: number;
    data: MnemonicType;
}

/**
 * 
 */
export class MnemonicTypesApi extends runtime.BaseAPI {

    /**
     */
    async mnemonicTypesCreateRaw(requestParameters: MnemonicTypesCreateRequest): Promise<runtime.ApiResponse<MnemonicType>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling mnemonicTypesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonicTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MnemonicTypeToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicTypeFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicTypesCreate(requestParameters: MnemonicTypesCreateRequest): Promise<MnemonicType> {
        const response = await this.mnemonicTypesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mnemonicTypesDeleteRaw(requestParameters: MnemonicTypesDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicTypesDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonicTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mnemonicTypesDelete(requestParameters: MnemonicTypesDeleteRequest): Promise<void> {
        await this.mnemonicTypesDeleteRaw(requestParameters);
    }

    /**
     */
    async mnemonicTypesListRaw(): Promise<runtime.ApiResponse<Array<MnemonicType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonicTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MnemonicTypeFromJSON));
    }

    /**
     */
    async mnemonicTypesList(): Promise<Array<MnemonicType>> {
        const response = await this.mnemonicTypesListRaw();
        return await response.value();
    }

    /**
     */
    async mnemonicTypesPartialUpdateRaw(requestParameters: MnemonicTypesPartialUpdateRequest): Promise<runtime.ApiResponse<MnemonicType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicTypesPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling mnemonicTypesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonicTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MnemonicTypeToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicTypeFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicTypesPartialUpdate(requestParameters: MnemonicTypesPartialUpdateRequest): Promise<MnemonicType> {
        const response = await this.mnemonicTypesPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mnemonicTypesReadRaw(requestParameters: MnemonicTypesReadRequest): Promise<runtime.ApiResponse<MnemonicType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicTypesRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonicTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicTypeFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicTypesRead(requestParameters: MnemonicTypesReadRequest): Promise<MnemonicType> {
        const response = await this.mnemonicTypesReadRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mnemonicTypesUpdateRaw(requestParameters: MnemonicTypesUpdateRequest): Promise<runtime.ApiResponse<MnemonicType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicTypesUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling mnemonicTypesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonicTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MnemonicTypeToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicTypeFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicTypesUpdate(requestParameters: MnemonicTypesUpdateRequest): Promise<MnemonicType> {
        const response = await this.mnemonicTypesUpdateRaw(requestParameters);
        return await response.value();
    }

}
