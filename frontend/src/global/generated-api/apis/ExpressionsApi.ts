/* tslint:disable */
/* eslint-disable */
/**
 * v2.0 Documentation
 * Swagger Specification
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Expression,
    ExpressionFromJSON,
    ExpressionToJSON,
} from '../models';

export interface ExpressionsCreateRequest {
    data: Expression;
}

export interface ExpressionsDeleteRequest {
    id: number;
}

export interface ExpressionsPartialUpdateRequest {
    id: number;
    data: Expression;
}

export interface ExpressionsReadRequest {
    id: number;
}

export interface ExpressionsUpdateRequest {
    id: number;
    data: Expression;
}

/**
 * 
 */
export class ExpressionsApi extends runtime.BaseAPI {

    /**
     */
    async expressionsCreateRaw(requestParameters: ExpressionsCreateRequest): Promise<runtime.ApiResponse<Expression>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling expressionsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/expressions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpressionToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionFromJSON(jsonValue));
    }

    /**
     */
    async expressionsCreate(requestParameters: ExpressionsCreateRequest): Promise<Expression> {
        const response = await this.expressionsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async expressionsDeleteRaw(requestParameters: ExpressionsDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expressionsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/expressions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async expressionsDelete(requestParameters: ExpressionsDeleteRequest): Promise<void> {
        await this.expressionsDeleteRaw(requestParameters);
    }

    /**
     */
    async expressionsListRaw(): Promise<runtime.ApiResponse<Array<Expression>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/expressions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpressionFromJSON));
    }

    /**
     */
    async expressionsList(): Promise<Array<Expression>> {
        const response = await this.expressionsListRaw();
        return await response.value();
    }

    /**
     */
    async expressionsPartialUpdateRaw(requestParameters: ExpressionsPartialUpdateRequest): Promise<runtime.ApiResponse<Expression>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expressionsPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling expressionsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/expressions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ExpressionToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionFromJSON(jsonValue));
    }

    /**
     */
    async expressionsPartialUpdate(requestParameters: ExpressionsPartialUpdateRequest): Promise<Expression> {
        const response = await this.expressionsPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async expressionsReadRaw(requestParameters: ExpressionsReadRequest): Promise<runtime.ApiResponse<Expression>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expressionsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/expressions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionFromJSON(jsonValue));
    }

    /**
     */
    async expressionsRead(requestParameters: ExpressionsReadRequest): Promise<Expression> {
        const response = await this.expressionsReadRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async expressionsUpdateRaw(requestParameters: ExpressionsUpdateRequest): Promise<runtime.ApiResponse<Expression>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expressionsUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling expressionsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/expressions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpressionToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionFromJSON(jsonValue));
    }

    /**
     */
    async expressionsUpdate(requestParameters: ExpressionsUpdateRequest): Promise<Expression> {
        const response = await this.expressionsUpdateRaw(requestParameters);
        return await response.value();
    }

}
