/* tslint:disable */
/* eslint-disable */
/**
 * v2.0 Documentation
 * Swagger Specification
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    Mnemonic,
    MnemonicFromJSON,
    MnemonicToJSON,
} from '../models';

export interface MnemonicsCreateRequest {
    data: Mnemonic;
}

export interface MnemonicsDeleteRequest {
    id: number;
}

export interface MnemonicsListRequest {
    search?: string;
    tags?: Array<number>;
    types?: Array<number>;
    limit?: number;
    offset?: number;
}

export interface MnemonicsPartialUpdateRequest {
    id: number;
    data: Mnemonic;
}

export interface MnemonicsReadRequest {
    id: number;
}

export interface MnemonicsUpdateRequest {
    id: number;
    data: Mnemonic;
}

/**
 * 
 */
export class MnemonicsApi extends runtime.BaseAPI {

    /**
     */
    async mnemonicsCreateRaw(requestParameters: MnemonicsCreateRequest): Promise<runtime.ApiResponse<Mnemonic>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling mnemonicsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MnemonicToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicsCreate(requestParameters: MnemonicsCreateRequest): Promise<Mnemonic> {
        const response = await this.mnemonicsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mnemonicsDeleteRaw(requestParameters: MnemonicsDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mnemonicsDelete(requestParameters: MnemonicsDeleteRequest): Promise<void> {
        await this.mnemonicsDeleteRaw(requestParameters);
    }

    /**
     */
    async mnemonicsListRaw(requestParameters: MnemonicsListRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     */
    async mnemonicsList(requestParameters: MnemonicsListRequest): Promise<InlineResponse200> {
        const response = await this.mnemonicsListRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mnemonicsPartialUpdateRaw(requestParameters: MnemonicsPartialUpdateRequest): Promise<runtime.ApiResponse<Mnemonic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicsPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling mnemonicsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MnemonicToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicsPartialUpdate(requestParameters: MnemonicsPartialUpdateRequest): Promise<Mnemonic> {
        const response = await this.mnemonicsPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mnemonicsReadRaw(requestParameters: MnemonicsReadRequest): Promise<runtime.ApiResponse<Mnemonic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicsRead(requestParameters: MnemonicsReadRequest): Promise<Mnemonic> {
        const response = await this.mnemonicsReadRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mnemonicsUpdateRaw(requestParameters: MnemonicsUpdateRequest): Promise<runtime.ApiResponse<Mnemonic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling mnemonicsUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling mnemonicsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/mnemonics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MnemonicToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MnemonicFromJSON(jsonValue));
    }

    /**
     */
    async mnemonicsUpdate(requestParameters: MnemonicsUpdateRequest): Promise<Mnemonic> {
        const response = await this.mnemonicsUpdateRaw(requestParameters);
        return await response.value();
    }

}
